#!/bin/sh

# GitLab
# Maintainer: Joel Lopes Da Silva <joel@lopes-da-silva.com>
# Based on work of: Torsten Zuehlsdorff <ports@toco-domains.de>,
#                   @charlienewey, rovanion.luckey@gmail.com, @dzaporozhets

# PROVIDE: gitlab
# REQUIRE: LOGIN DAEMON mysql postgresql redis
# KEYWORD: shutdown

. /etc/rc.subr

name="gitlab"
rcvar="${name}_enable"
extra_commands="reload status"

status_cmd="print_status"
start_cmd="start_gitlab"
stop_cmd="stop_gitlab"
restart_cmd="restart_gitlab"
reload_cmd="reload_gitlab"

load_rc_config $name

# Script variable names should be lower-case not to conflict with
# internal /bin/sh variables such as PATH, EDITOR or SHELL.
# They should also be prefixed with "gitlab_".
gitlab_enable=${gitlab_enable:-"NO"}
gitlab_user=${gitlab_user:-"git"}
gitlab_use_unicorn=${gitlab_use_unicorn:-""}
gitlab_sidekiq_workers=${gitlab_sidekiq_workers:-""}
gitlab_use_web_server=${gitlab_use_web_server:-"puma"}

case "${gitlab_use_web_server}" in
  puma|unicorn)
    ;;
  *)
    echo "Unsupported web server '${gitlab_use_web_server}' (Allowed: 'puma', 'unicorn')" 1>&2
    exit 1
    ;;
esac

# Other script variables
eval gitlab_home=${gitlab_home:-"~${gitlab_user}"}
gitlab_root=${gitlab_root:-"$gitlab_home/gitlab"}
gitlab_pid_path=${gitlab_pid_path:-"$gitlab_root/tmp/pids"}
gitlab_socket_path=${gitlab_socket_path:-"$gitlab_root/tmp/sockets"}
gitlab_rails_socket=${gitlab_rails_socket:-"$gitlab_socket_path/gitlab.socket"}
gitlab_web_server_pid_path=${gitlab_web_server_pid_path:-"$gitlab_pid_path/$gitlab_use_web_server.pid"}
gitlab_mail_room_enabled=${gitlab_mail_room_enabled:-"false"}
gitlab_mail_room_pid_path=${gitlab_mail_room_pid_path:-"$gitlab_pid_path/mail_room.pid"}
gitlab_workhorse_dir=${gitlab_workhorse_dir:-"$(cd $gitlab_root/../gitlab-workhorse 2> /dev/null && pwd)"}
gitlab_workhorse_pid_path=${gitlab_workhorse_pid_path:-"$gitlab_pid_path/gitlab-workhorse.pid"}
gitlab_workhorse_options=${gitlab_workhorse_options:-"-listenUmask 0 -listenNetwork unix -listenAddr $gitlab_socket_path/gitlab-workhorse.socket -authBackend http://127.0.0.1:8080 -authSocket $gitlab_rails_socket -documentRoot $gitlab_root/public"}
gitlab_workhorse_log=${gitlab_workhorse_log:-"$gitlab_root/log/gitlab-workhorse.log"}
gitlab_pages_enabled=false
gitlab_pages_dir=$(cd ${gitlab_root}/../gitlab-pages 2> /dev/null && pwd)
gitlab_pages_pid_path="${gitlab_pid_path}/gitlab-pages.pid"
gitlab_pages_options="-pages-domain example.com -pages-root ${gitlab_root}/shared/pages -listen-proxy 127.0.0.1:8090"
gitlab_pages_log="${gitlab_root}/log/gitlab-pages.log"
gitaly_enabled=true
gitaly_dir=$(cd ${gitlab_root}/../gitaly 2> /dev/null && pwd)
gitaly_pid_path="${gitlab_pid_path}/gitaly.pid"
gitaly_log="${gitlab_root}/log/gitaly.log"
gitlab_rails_environment=${gitlab_rails_environment:-"production"}
gitlab_additional_environment_variables=${gitlab_additional_environment_variables:-"PATH=\"$PATH:/usr/local/sbin:/usr/local/bin\""}
gitlab_ruby_environment_wrapper=${gitlab_ruby_environment_wrapper:-"${gitlab_home}/bin/gitlab_ruby_environment_wrapper"}

# Redefine most of these variables without the "gitlab_" prefix for
# backward compatibility with old configuration files.
app_user=${app_user:-"$gitlab_user"}
app_root=${app_root:-"$gitlab_root"}
pid_path=${pid_path:-"$gitlab_pid_path"}
socket_path=${socket_path:-"$gitlab_socket_path"}
rails_socket=${rails_socket:-"$gitlab_rails_socket"}
web_server_pid_path=${web_server_pid_path:-"$gitlab_web_server_pid_path"}
mail_room_enabled=${mail_room_enabled:-"$gitlab_mail_room_enabled"}
mail_room_pid_path=${mail_room_pid_path:-"$gitlab_mail_room_pid_path"}
use_web_server=${gitlab_use_web_server}

if [ -z "$gitlab_sidekiq_workers" ]; then
  sidekiq_pid_path="$pid_path/sidekiq.pid"
else
  sidekiq_pid_path="$pid_path/sidekiq-cluster.pid"
fi

### Environment variables
run_env="env RAILS_ENV=$gitlab_rails_environment SIDEKIQ_WORKERS=$gitlab_sidekiq_workers HOME=$gitlab_home $gitlab_additional_environment_variables"
if [ -x "${gitlab_ruby_environment_wrapper}" ]; then
  run_env="${run_env} ${gitlab_ruby_environment_wrapper}"
fi
gitlab_bin_web_run_env=$(echo $run_env | sed "s| RAILS_ENV=$gitlab_rails_environment SIDEKIQ_WORKERS=$gitlab_sidekiq_workers | RAILS_ENV=$gitlab_rails_environment USE_WEB_SERVER=$use_web_server |g")


### Init Script functions

## Gets the pids from the files
check_pids(){
  if ! mkdir -p "$pid_path"; then
    echo "Could not create the path $pid_path needed to store the pids."
    exit 1
  fi
  # If there exists a file which should hold the value of the web server pid: read it.
  if [ -f "$web_server_pid_path" ]; then
    wpid=$(cat "$web_server_pid_path")
  else
    wpid=0
  fi
  if [ -f "$sidekiq_pid_path" ]; then
    spid=$(cat "$sidekiq_pid_path")
  else
    spid=0
  fi
  if [ -f "$gitlab_workhorse_pid_path" ]; then
    hpid=$(cat "$gitlab_workhorse_pid_path")
  else
    hpid=0
  fi
  if [ "$mail_room_enabled" = true ]; then
    if [ -f "$mail_room_pid_path" ]; then
      mpid=$(cat "$mail_room_pid_path")
    else
      mpid=0
    fi
  fi
  if [ "$gitlab_pages_enabled" = true ]; then
    if [ -f "$gitlab_pages_pid_path" ]; then
      gppid=$(cat "$gitlab_pages_pid_path")
    else
      gppid=0
    fi
  fi
  if [ "$gitaly_enabled" = true ]; then
    if [ -f "$gitaly_pid_path" ]; then
      gapid=$(cat "$gitaly_pid_path")
    else
      gapid=0
    fi
  fi
}

## Called when we have started the two processes and are waiting for their pid files.
wait_for_pids(){
  # We are sleeping a bit here mostly because sidekiq is slow at writing its pid
  i=0;
  while [ ! -f $web_server_pid_path ] || [ ! -f $sidekiq_pid_path ] || [ ! -f $gitlab_workhorse_pid_path ] || { [ "$mail_room_enabled" = true ] && [ ! -f $mail_room_pid_path ]; } || { [ "$gitlab_pages_enabled" = true ] && [ ! -f $gitlab_pages_pid_path ]; } || { [ "$gitaly_enabled" = true ] && [ ! -f $gitaly_pid_path ]; }; do
    sleep 0.1;
    i=$((i+1))
    if [ $((i%10)) = 0 ]; then
      echo -n "."
    elif [ $((i)) = 601 ]; then
      echo "Waited 60s for the processes to write their pids, something probably went wrong."
      exit 1;
    fi
  done
  echo
}

# We use the pids in so many parts of the script it makes sense to always check them.
# Only after start() is run should the pids change. Sidekiq sets its own pid.
check_pids


## Checks whether the different parts of the service are already running or not.
check_status(){
  check_pids
  # If the web server is running kill -0 $wpid returns true, or rather 0.
  # Checks of *_status should only check for == 0 or != 0, never anything else.
  if [ $wpid -ne 0 ]; then
    kill -0 "$wpid" 2>/dev/null
    web_status="$?"
  else
    web_status="-1"
  fi
  if [ $spid -ne 0 ]; then
    kill -0 "$spid" 2>/dev/null
    sidekiq_status="$?"
  else
    sidekiq_status="-1"
  fi
  if [ $hpid -ne 0 ]; then
    kill -0 "$hpid" 2>/dev/null
    gitlab_workhorse_status="$?"
  else
    gitlab_workhorse_status="-1"
  fi
  if [ "$mail_room_enabled" = true ]; then
    if [ $mpid -ne 0 ]; then
      kill -0 "$mpid" 2>/dev/null
      mail_room_status="$?"
    else
      mail_room_status="-1"
    fi
  fi
  if [ "$gitlab_pages_enabled" = true ]; then
    if [ $gppid -ne 0 ]; then
      kill -0 "$gppid" 2>/dev/null
      gitlab_pages_status="$?"
    else
      gitlab_pages_status="-1"
    fi
  fi
  if [ "$gitaly_enabled" = true ]; then
    if [ $gapid -ne 0 ]; then
      kill -0 "$gapid" 2>/dev/null
      gitaly_status="$?"
    else
      gitaly_status="-1"
    fi
  fi
  if [ $web_status = 0 ] && [ $sidekiq_status = 0 ] && [ $gitlab_workhorse_status = 0 ] && { [ "$mail_room_enabled" != true ] || [ $mail_room_status = 0 ]; } && { [ "$gitlab_pages_enabled" != true ] || [ $gitlab_pages_status = 0 ]; } && { [ "$gitaly_enabled" != true ] || [ $gitaly_status = 0 ]; }; then
    gitlab_status=0
  else
    # http://refspecs.linuxbase.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
    # code 3 means 'program is not running'
    gitlab_status=3
  fi
}

## Check for stale pids and remove them if necessary.
check_stale_pids(){
  check_status
  # If there is a pid it is something else than 0, the service is running if
  # *_status is == 0.
  if [ "$wpid" != "0" ] && [ "$web_status" != "0" ]; then
    echo "Removing stale web server pid. This is most likely caused by the web server crashing the last time it ran."
    if ! rm "$web_server_pid_path"; then
      echo "Unable to remove stale pid, exiting."
      exit 1
    fi
  fi
  if [ "$spid" != "0" ] && [ "$sidekiq_status" != "0" ]; then
    echo "Removing stale Sidekiq job dispatcher pid. This is most likely caused by Sidekiq crashing the last time it ran."
    if ! rm "$sidekiq_pid_path"; then
      echo "Unable to remove stale pid, exiting"
      exit 1
    fi
  fi
  if [ "$hpid" != "0" ] && [ "$gitlab_workhorse_status" != "0" ]; then
    echo "Removing stale GitLab Workhorse pid. This is most likely caused by GitLab Workhorse crashing the last time it ran."
    if ! rm "$gitlab_workhorse_pid_path"; then
      echo "Unable to remove stale pid, exiting"
      exit 1
    fi
  fi
  if [ "$mail_room_enabled" = true ] && [ "$mpid" != "0" ] && [ "$mail_room_status" != "0" ]; then
    echo "Removing stale MailRoom job dispatcher pid. This is most likely caused by MailRoom crashing the last time it ran."
    if ! rm "$mail_room_pid_path"; then
      echo "Unable to remove stale pid, exiting"
      exit 1
    fi
  fi
  if [ "$gitlab_pages_enabled" = true ] && [ "$gppid" != "0" ] && [ "$gitlab_pages_status" != "0" ]; then
    echo "Removing stale GitLab Pages job dispatcher pid. This is most likely caused by GitLab Pages crashing the last time it ran."
    if ! rm "$gitlab_pages_pid_path"; then
      echo "Unable to remove stale pid, exiting"
      exit 1
    fi
  fi
  if [ "$gitaly_enabled" = true ] && [ "$gapid" != "0" ] && [ "$gitaly_status" != "0" ]; then
    echo "Removing stale Gitaly pid. This is most likely caused by Gitaly crashing the last time it ran."
    if ! rm "$gitaly_pid_path"; then
      echo "Unable to remove stale pid, exiting"
      exit 1
    fi
  fi
}

## If no parts of the service is running, bail out.
exit_if_not_running(){
  check_stale_pids
  if [ "$web_status" != "0" ] && [ "$sidekiq_status" != "0" ] && [ "$gitlab_workhorse_status" != "0" ] && { [ "$mail_room_enabled" != true ] || [ "$mail_room_status" != "0" ]; } && { [ "$gitlab_pages_enabled" != true ] || [ "$gitlab_pages_status" != "0" ]; } && { [ "$gitaly_enabled" != true ] || [ "$gitaly_status" != "0" ]; }; then
    echo "GitLab is not running."
    exit 1
  fi
}

## Starts web server and Sidekiq if they're not running.
start_gitlab() {
  check_stale_pids

  # Then check if the service is running. If it is: don't start again.
  if [ "$web_status" = "0" ]; then
    echo "The web server already running with pid $wpid, not restarting."
  else
    echo "Starting GitLab web server ($use_web_server)"
    # Remove old socket if it exists
    rm -f "$rails_socket" 2>/dev/null
    # Start the web server
    su - $gitlab_user -c "$gitlab_bin_web_run_env ${app_root}/bin/web start"
  fi
  if [ "$gitlab_pages_enabled" = true ] && [ "$gitlab_pages_status" != "0" ]; then
    echo "Starting GitLab Pages"
  fi
  if [ "$gitaly_enabled" = true ] && [ "$gitaly_status" != "0" ]; then
    echo "Starting Gitaly"
  fi

  # If sidekiq is already running, don't start it again.
  if [ "$sidekiq_status" = "0" ]; then
    echo "The Sidekiq job dispatcher is already running with pid $spid, not restarting"
  else
    echo "Starting GitLab Sidekiq"
    su - $gitlab_user -c "$run_env ${app_root}/bin/background_jobs start"
  fi

  if [ "$gitlab_workhorse_status" = "0" ]; then
    echo "The GitLab Workhorse is already running with pid $hpid, not restarting"
  else
    # No need to remove a socket, gitlab-workhorse does this itself.
    # Because gitlab-workhorse has multiple executables we need to fix
    # the PATH.
    echo "Starting GitLab Workhorse"
    gitlab_workhorse_run_env=""
    case "$run_env" in
      *\ PATH=*)
        gitlab_workhorse_run_env=$(echo $run_env | sed "s| PATH=| PATH=$gitlab_workhorse_dir:|g")
        ;;
      *)
        gitlab_workhorse_run_env="$run_env PATH=$gitlab_workhorse_dir:$PATH"
        ;;
    esac
    su - $gitlab_user -c "/usr/sbin/daemon -p $gitlab_workhorse_pid_path \
      -t gitlab-workhorse $gitlab_workhorse_run_env \
        $gitlab_workhorse_dir/gitlab-workhorse $gitlab_workhorse_options \
      >> $gitlab_workhorse_log 2>&1"
  fi

  if [ "$mail_room_enabled" = true ]; then
    # If MailRoom is already running, don't start it again.
    if [ "$mail_room_status" = "0" ]; then
      echo "The MailRoom email processor is already running with pid $mpid, not restarting"
    else
      echo "Starting GitLab MailRoom"
      su - $gitlab_user -c "$run_env ${app_root}/bin/mail_room start"
    fi
  fi

  if [ "$gitlab_pages_enabled" = true ]; then
    if [ "$gitlab_pages_status" = "0" ]; then
      echo "The GitLab Pages is already running with pid $gppid, not restarting"
    else
      $run_env $app_root/bin/daemon_with_pidfile $gitlab_pages_pid_path  \
          $gitlab_pages_dir/gitlab-pages $gitlab_pages_options \
        >> $gitlab_pages_log 2>&1 &
    fi
  fi

  if [ "$gitaly_enabled" = true ]; then
    if [ "$gitaly_status" = "0" ]; then
      echo "Gitaly is already running with pid $gapid, not restarting"
    else
      su - $gitlab_user -c "$run_env $app_root/bin/daemon_with_pidfile $gitaly_pid_path \
        $gitaly_dir/gitaly $gitaly_dir/config.toml >> $gitaly_log 2>&1 &"
    fi
  fi

  # Wait for the pids to be planted
  wait_for_pids
  # Finally check the status to tell whether or not GitLab is running
  print_status
}

## Asks web server, Sidekiq and MailRoom if they would be so kind as to stop, if not kills them.
stop_gitlab() {
  completion_policy="$1"
  exit_if_not_running

  if [ "$web_status" = "0" ]; then
    echo "Shutting down GitLab web server"
    su - $gitlab_user -c "$gitlab_bin_web_run_env ${app_root}/bin/web stop"
  fi
  if [ "$sidekiq_status" = "0" ]; then
    echo "Shutting down GitLab Sidekiq"
    su - $gitlab_user -c "$run_env ${app_root}/bin/background_jobs stop"
  fi
  if [ "$gitlab_workhorse_status" = "0" ]; then
    echo "Shutting down GitLab Workhorse"
    kill -- $(cat $gitlab_workhorse_pid_path)
  fi
  if [ "$mail_room_enabled" = true ] && [ "$mail_room_status" = "0" ]; then
    echo "Shutting down GitLab MailRoom"
    su - $gitlab_user -c "$run_env ${app_root}/bin/mail_room stop"
  fi
  if [ "$gitlab_pages_status" = "0" ]; then
    echo "Shutting down gitlab-pages"
    kill -- $(cat $gitlab_pages_pid_path)
  fi
  if [ "$gitaly_status" = "0" ]; then
    echo "Shutting down Gitaly"
    kill -- $(cat $gitaly_pid_path)
  fi

  # If something needs to be stopped, lets wait for it to stop. Never use SIGKILL in a script.
  while [ "$web_status" = "0" ] || [ "$sidekiq_status" = "0" ] || [ "$gitlab_workhorse_status" = "0" ] || { [ "$mail_room_enabled" = true ] && [ "$mail_room_status" = "0" ]; } || { [ "$gitlab_pages_enabled" = true ] && [ "$gitlab_pages_status" = "0" ]; } || { [ "$gitaly_enabled" = true ] && [ "$gitaly_status" = "0" ]; }; do
    sleep 1
    check_status
    printf "."
    if [ "$web_status" != "0" ] && [ "$sidekiq_status" != "0" ] && [ "$gitlab_workhorse_status" != "0" ] && { [ "$mail_room_enabled" != true ] || [ "$mail_room_status" != "0" ]; } && { [ "$gitlab_pages_enabled" != true ] || [ "$gitlab_pages_status" != "0" ]; } && { [ "$gitaly_enabled" != true ] || [ "$gitaly_status" != "0" ]; }; then
      printf "\n"
      break
    fi
  done

  sleep 1
  # Cleaning up unused pids
  rm "$web_server_pid_path" 2>/dev/null
  # rm "$sidekiq_pid_path" 2>/dev/null # Sidekiq seems to be cleaning up its own pid.
  rm -f "$gitlab_workhorse_pid_path"
  if [ "$mail_room_enabled" = true ]; then
    rm "$mail_room_pid_path" 2>/dev/null
  fi
  rm -f "$gitlab_pages_pid_path"
  rm -f "$gitaly_pid_path"

  if [ "$completion_policy" != "skip_print_status_and_exit" ]; then
    print_status exit_cleanly_if_not_running
  fi
}

## Prints the status of GitLab and its components.
print_status() {
  exit_policy="$1"
  check_status
  if [ "$web_status" != "0" ] && [ "$sidekiq_status" != "0" ] && [ "$gitlab_workhorse_status" != "0" ] && { [ "$mail_room_enabled" != true ] || [ "$mail_room_status" != "0" ]; } && { [ "$gitlab_pages_enabled" != true ] || [ "$gitlab_pages_status" != "0" ]; } && { [ "$gitaly_enabled" != true ] || [ "$gitaly_status" != "0" ]; }; then
    echo "GitLab is not running."
    if [ "$exit_policy" = "exit_cleanly_if_not_running" ]; then
        exit
    else
        exit 1
    fi
  fi
  if [ "$web_status" = "0" ]; then
    echo "The GitLab web server with pid $wpid is running."
  else
    printf "The GitLab web server is \033[31mnot running\033[0m.\n"
  fi
  if [ "$sidekiq_status" = "0" ]; then
    echo "The GitLab Sidekiq job dispatcher with pid $spid is running."
  else
    printf "The GitLab Sidekiq job dispatcher is \033[31mnot running\033[0m.\n"
  fi
  if [ "$gitlab_workhorse_status" = "0" ]; then
    echo "The GitLab Workhorse with pid $hpid is running."
  else
    printf "The GitLab Workhorse is \033[31mnot running\033[0m.\n"
  fi
  if [ "$mail_room_enabled" = true ]; then
    if [ "$mail_room_status" = "0" ]; then
      echo "The GitLab MailRoom email processor with pid $mpid is running."
    else
      printf "The GitLab MailRoom email processor is \033[31mnot running\033[0m.\n"
    fi
  fi
  if [ "$gitlab_pages_enabled" = true ]; then
    if [ "$gitlab_pages_status" = "0" ]; then
      echo "The GitLab Pages with pid $gppid is running."
    else
      printf "The GitLab Pages is \033[31mnot running\033[0m.\n"
    fi
  fi
  if [ "$gitaly_enabled" = true ]; then
    if [ "$gitaly_status" = "0" ]; then
      echo "Gitaly with pid $gapid is running."
    else
      printf "Gitaly is \033[31mnot running\033[0m.\n"
    fi
  fi
  if [ "$web_status" = "0" ] && [ "$sidekiq_status" = "0" ] && [ "$gitlab_workhorse_status" = "0" ] && { [ "$mail_room_enabled" != true ] || [ "$mail_room_status" = "0" ]; } && { [ "$gitlab_pages_enabled" != true ] || [ "$gitlab_pages_status" = "0" ]; } && { [ "$gitaly_enabled" != true ] || [ "$gitaly_status" = "0" ]; }; then
    printf "GitLab and all its components are \033[32mup and running\033[0m.\n"
  fi
}

## Tells web server to reload its config and Sidekiq to restart
reload_gitlab(){
  exit_if_not_running
  if [ "$wpid" = "0" ];then
    echo "The GitLab web server Web server is not running thus its configuration can't be reloaded."
    exit 1
  fi
  printf "Reloading GitLab web server configuration... "
  su - $gitlab_user -c "$gitlab_bin_web_run_env ${app_root}/bin/web reload"
  echo "Done."

  echo "Restarting GitLab Sidekiq since it isn't capable of reloading its config..."
  su - $gitlab_user -c "$run_env ${app_root}/bin/background_jobs restart"

  if [ "$mail_room_enabled" = true ]; then
    echo "Restarting GitLab MailRoom since it isn't capable of reloading its config..."
    su - $gitlab_user -c "$run_env ${app_root}/bin/mail_room restart"
  fi

  wait_for_pids
  print_status
}

## Restarts Sidekiq and web server.
restart_gitlab(){
  check_status
  if [ "$web_status" = "0" ] || [ "$sidekiq_status" = "0" ] || [ "$gitlab_workhorse" = "0" ] || { [ "$mail_room_enabled" = true ] && [ "$mail_room_status" = "0" ]; } || { [ "$gitlab_pages_enabled" = true ] && [ "$gitlab_pages_status" = "0" ]; } || { [ "$gitaly_enabled" = true ] && [ "$gitaly_status" = "0" ]; }; then
    stop_gitlab skip_print_status_and_exit
  fi
  start_gitlab
}


run_rc_command "$1"

